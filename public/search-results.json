[
  {
    "path": "/advanced-features/affiliate-program",
    "text": "---\ntitle: Affiliate program\n---\n\nimport Layout from \"../../components/Layout\";\n\nexport const meta = {\n  title: \"Affiliate program\",\n};\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Affiliate program\n\nYes!\n\nWe offer an affiliate program for you to recommend Buttondown to your audience while recurring a recurring **25%** **commission** on all customers you send our way. It's easy to get set up:\n\n1. **Sign up for Buttondown**. Hopefully this one is easy — you should be using Buttondown to promote it, after all! Understanding what Buttondown offers as a tool and how it can help your audience is key.\n2. **Share Buttondown with your audience**. Use a `utm_campaign` of your Buttondown username and a `utm_affiliate` of `affiliate`.\n3. **Sit back and wait for an email**. I'm manually sending remittances at the moment, so I'll reach out to you once you have payouts ready! (I will automate this at some point, I promise.)\n",
    "title": "Affiliate program"
  },
  {
    "path": "/advanced-features/customizing-your-emails",
    "text": "---\ntitle: Customizing your emails\n---\n\nimport Layout from \"../../components/Layout\";\n\nexport const meta = {\n  title: \"Customizing your emails\",\n};\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Customizing your emails\n\n## Using web fonts in your email\n\nWith the caveat that [not every email client supports custom web fonts](https://www.litmus.com/blog/the-ultimate-guide-to-web-fonts/), it's actually fairly easy to specify a custom web font! You'll just want to supply some custom CSS in your [Design settings page](https://buttondown.email/settings/design) like the following:\n\n```css\n// Declare the custom font...\n@font-face {\n  // The name of the font.\n  font-family: \"Montserrat\";\n\n  // Where it's hosted,\n  src: url(\"https://fonts.googleapis.com/css?family=Montserrat\");\n}\n\n// Then use it!\nbody,\ndiv,\np,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nol,\nul,\ntable,\ntr,\ntd,\n* {\n  font-family: \"Montserrat\";\n  font-size: 18px;\n  line-height: 2em;\n}\n```\n\n## Buttondown's default CSS\n\n```\np, div, ul, li {\n  max-width: 600px;\n  line-height: 1.4em;\n  font-size: 16px;\n}\n\nhr {\n  border: 0;\n  border-bottom: 1px #000 dotted;\n  max-width: 600px;\n  margin-left: 0;\n}\n\nh4 {\n  font-size: 14px;\n}\n\nh3 {\n  font-size: 16px;\n}\n\nh2 {\n  font-size: 18px;\n}\n\nh1 {\n  font-size: 20px;\n}\n\nimg {\n  max-width: 100%;\n  margin-left: 0 !important;\n  margin-right: 0 !important;\n}\n\n/* Handle tweet emoji in Gmail. */\nimg[goomoji] {\n  width: 24px !important;\n}\n\nblockquote {\n  border-left: 4px solid #acb3be;\n  color: #7e8a9a;\n  margin-left: 0;\n  padding-left: 1em;\n}\n\nfigcaption {\n  text-align: center;\n  width: 100%;\n  margin-top: 10px;\n  color: #7E7E82;\n  margin-bottom: .25em;\n}\n\n.newsletter-notice {\n  background-color: #d9edf7;\n  color: #31708f;\n  border-radius: 5px;\n  text-align: center;\n  padding: 20px 30px;\n}\n\n/* Tweet embedding stuff. */\n.tweet {\n  display: block;\n  font: normal normal 16px/1.4 Helvetica, Roboto, \"Segoe UI\", Calibri, sans-serif;\n  color: #1c2022 !important;\n  white-space: normal;\n  white-space: initial;\n  overflow: hidden;\n  cursor: pointer;\n  background: #fff 0 0;\n  border: 1px solid #e1e8ed;\n  border-radius: 4px;\n  max-width: 460px;\n  /* 500px - 20px on either side */\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n.tweet a,\n.tweet a:visited,\n.tweet a:active {\n  color: #222 !important;\n  text-decoration: none;\n}\n\n.tweet a:focus,\n.tweet a:hover {\n  color: #3b94d9;\n}\n\n.tweet a:focus {\n  text-decoration: underline;\n}\n\n.tweet .screen_name {\n  line-height: 0px;\n  font-size: 14px;\n  color: #697882;\n}\n\n.tweet .screen_name:before {\n  white-space: pre;\n  content: \"\\A\";\n  /*\\200e\";*/\n}\n\n.tweet .name {\n  font-weight: 700;\n}\n\n.tweet .text + .metadata {\n  margin-top: 3.2px;\n}\n\n.tweet .metadata {\n  font-size: 14px;\n  color: #697882;\n}\n\n.tweet .text {\n  white-space: normal;\n  cursor: text;\n}\n\n.tweet .header, .tweet .body {\n  padding: 20px;\n}\n\n.tweet .header {\n  position: relative;\n  padding-bottom: 0px;\n  padding-top: 10px;\n  white-space: nowrap;\n}\n\n.tweet .body {\n  margin-top: 14px;\n  padding-top: 0px;\n  padding-bottom: 14px;\n}\n\n.tweet .media {\n  border-bottom: 1px solid #e1e8ed;\n  line-height: 0;\n}\n\n.tweet .author {\n  margin-top: 2px;\n  line-height: 0;\n  max-width: 100%;\n  overflow: hidden !important;\n  text-overflow: ellipsis !important;\n  white-space: nowrap !important;\n  word-wrap: normal !important;\n}\n\n.tweet .author .link {\n  line-height: 1.2;\n}\n\n.tweet .author .avatar {\n  display: inline-block;\n  width: 36px;\n  height: 36px;\n  overflow: hidden;\n  background-color: transparent;\n  margin-right: 5px;\n  border-radius: 50%;\n}\n\n.tweet .author .avatar img {\n  max-width: 100%;\n  max-height: 100%;\n}\n\n.tweet .link_blend:not(:focus):not(:hover):not(:active) {\n  font-weight: inherit;\n  color: inherit;\n  text-decoration: inherit;\n}\n\n.tweet blockquote,\n.tweet p {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  border: none;\n\n  // Google is a dick and replaces emoji\n  // with image tags, which we by default set to 100% width.\n  // This should hopefully fix that issue.\n  img {\n    width: auto !important;\n  }\n}\n\n.tweet img.media {\n  margin-left: -20px;\n  margin-top: -20px;\n  margin-bottom: 20px;\n  width: 100%;\n  max-width: calc(100% + 40px);\n  border-bottom: 1px solid #e1e8ed;\n}\n\n.tweet img {\n  width: 100%;\n}\n\n.tweet:hover {\n  border-color: #ccd6dd;\n}\n\n.tweet:hover .media {\n  border-color: #ccd6dd;\n}\n\n.tweet blockquote {\n  background: none;\n}\n\n.favorite-count__icon,\n.retweet-count__icon {\n  width: 1.25em;\n  transform: scaleX(1);\n  display: inline-block;\n  height: 1.25em;\n  background-repeat: no-repeat;\n  background-size: contain;\n  vertical-align: text-bottom;\n}\n\n.retweet-count__icon {\n  background-image: url(data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%3E%3Cpath%20fill%3D%22%23657786%22%20d%3D%22M23.77%2015.67c-.292-.293-.767-.293-1.06%200l-2.22%202.22V7.65c0-2.068-1.683-3.75-3.75-3.75h-5.85c-.414%200-.75.336-.75.75s.336.75.75.75h5.85c1.24%200%202.25%201.01%202.25%202.25v10.24l-2.22-2.22c-.293-.293-.768-.293-1.06%200s-.294.768%200%201.06l3.5%203.5c.145.147.337.22.53.22s.383-.072.53-.22l3.5-3.5c.294-.292.294-.767%200-1.06zm-10.66%203.28H7.26c-1.24%200-2.25-1.01-2.25-2.25V6.46l2.22%202.22c.148.147.34.22.532.22s.384-.073.53-.22c.293-.293.293-.768%200-1.06l-3.5-3.5c-.293-.294-.768-.294-1.06%200l-3.5%203.5c-.294.292-.294.767%200%201.06s.767.293%201.06%200l2.22-2.22V16.7c0%202.068%201.683%203.75%203.75%203.75h5.85c.414%200%20.75-.336.75-.75s-.337-.75-.75-.75z%22%2F%3E%3C%2Fsvg%3E);\n}\n\n.favorite-count__icon {\n  margin-left: 10px;\n  background-image: url(data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%3E%3Cpath%20fill%3D%22%23657786%22%20d%3D%22M12%2021.638h-.014C9.403%2021.59%201.95%2014.856%201.95%208.478c0-3.064%202.525-5.754%205.403-5.754%202.29%200%203.83%201.58%204.646%202.73.813-1.148%202.353-2.73%204.644-2.73%202.88%200%205.404%202.69%205.404%205.755%200%206.375-7.454%2013.11-10.037%2013.156H12zM7.354%204.225c-2.08%200-3.903%201.988-3.903%204.255%200%205.74%207.035%2011.596%208.55%2011.658%201.52-.062%208.55-5.917%208.55-11.658%200-2.267-1.822-4.255-3.902-4.255-2.528%200-3.94%202.936-3.952%202.965-.23.562-1.156.562-1.387%200-.015-.03-1.426-2.965-3.955-2.965z%22%2F%3E%3C%2Fsvg%3E);\n}\n\n.tweet-actions {\n  margin-top: 5px;\n  font-size: 14px;\n}\n\n.identifier {\n  display: inline-block;\n}\n\n\n.video {\n    position: relative;\n    display: inline-block;\n}\n.video::before {\n    content: \"\";\n    position: absolute;\n    width: 30%;\n    height: 30%;\n    left: 35%;\n    top: 35%;\n    z-index: 10;\n}\n\n\npre {\n  background: #ebedef;\n  border-radius: 0 .25rem .25rem 0;\n  overflow-x: auto;\n  padding: 1em;\n  font-size: 15px;\n  line-height: 20px;\n}\n\n.codehilite pre {\n  background: none;\n}\n\ncode {\n  background: #ebedef;\n  border-radius: 0 .25rem .25rem 0;\n  font-size: 14px;\n  padding: 3px 6px;\n}\n```\n\n## Centering your emails\n\nButtondown's emails are constrained in width and left-aligned by default. This is because I think it is readable and legible and scans easily.\n\nBut if you want a center-aligned email, I won't begrudge you! It's very easy with CSS. Just apply the following rule:\n\n```python\np, div, ul, li {\n  margin: 0 auto 0 auto;\n}\n```\n\nThis will keep the text in your email left-aligned, but center the text in the browser:\n\n![A screenshot of Gmail to show the final, rendered, email.](/images/centered-image.png)\n\n## Customizing the Gmail icon of your email\n\nUnfortunately, this is out of my (or Buttondown)'s hands — the \"avatar\" or icon that shows up in an email in Gmail is just based on whether or not that email address is registered in Google's various systems. If you're sending from a Google-adjacent email address — say a domain registered in Google Suite, or a Gmail account directly — it should show up: otherwise, it won't.\n\n(Google is exploring support for BIMI, a protocol that allows services like Buttondown to arbitrarily provide icons: I'm monitoring these developments and will be pursuing them once they become generally available!)\n",
    "title": "Customizing your emails"
  },
  {
    "path": "/advanced-features/customizing-your-web-presence",
    "text": "---\ntitle: Customizing your web presence\n---\n\nimport Layout from \"../../components/Layout\";\nimport Table from \"../../components/Table\";\nimport BFPNotice from \"../../components/BFPNotice\";\n\nexport const meta = {\n  title: \"Customizing your web presence\",\n};\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Customizing your web presence\n\n<BFPNotice />\n\n## Date format syntax\n\n<Table\n  columns={[\n    {\n      title: \"Input\",\n      key: \"input\",\n    },\n    {\n      title: \"Example\",\n      key: \"example\",\n    },\n    {\n      title: \"Description\",\n      key: \"description\",\n    },\n  ]}\n  content={[\n    {\n      input: \"YYYY\",\n      example: 2014,\n      description: \"4 or 2 digit year\",\n    },\n    {\n      input: \"YY\",\n      example: 14,\n      description: \"2 digit year\",\n    },\n    {\n      input: \"Y\",\n      example: -25,\n      description: \"Year with any number of digits and sign\",\n    },\n    {\n      input: \"Q\",\n      example: \"1..4\",\n      description: \"Quarter of year. Sets month to first month in quarter.\",\n    },\n    {\n      input: \"M MM\",\n      example: \"1..12\",\n      description: \"Month number\",\n    },\n    {\n      input: \"MMM MMMM\",\n      example: \"Jan..December\",\n      description: \"Month name in locale\",\n    },\n    {\n      input: \"D DD\",\n      example: \"1..31\",\n      description: \"Day of month\",\n    },\n    {\n      input: \"Do\",\n      example: \"1st..31st\",\n      description: \"Day of month with ordinal\",\n    },\n    {\n      input: \"DDD DDDD\",\n      example: \"1..365\",\n      description: \"Day of year\",\n    },\n    {\n      input: \"X\",\n      example: \"1410715640.579\",\n      description: \"Unix timestamp\",\n    },\n    {\n      input: \"x\",\n      example: \"1410715640579\",\n      description: \"Unix ms timestamp\",\n    },\n    {\n      input: \"H HH\",\n      example: \"0..23\",\n      description: \"Hours (24 hour time)\",\n    },\n    {\n      input: \"h hh\",\n      example: \"1..12\",\n      description: \"Hours (12 hour time)\",\n    },\n    {\n      input: \"k kk\",\n      example: \"1..24\",\n      description: \"Hours (24 hour time with 1-index)\",\n    },\n    {\n      input: \"a A\",\n      example: \"am pm\",\n      description: \"Post or ante meridiem\",\n    },\n    {\n      input: \"m mm\",\n      example: \"0..59\",\n      description: \"minutes\",\n    },\n    {\n      input: \"s ss\",\n      example: \"0..59\",\n      description: \"seconds\",\n    },\n    {\n      input: \"S SS SSS\",\n      example: \"0..999\",\n      description: \"fractional seconds\",\n    },\n    {\n      input: \"Z ZZ\",\n      example: \"+12:00\",\n      description: \"UTC Offset\",\n    },\n  ]}\n/>\n",
    "title": "Customizing your web presence"
  },
  {
    "path": "/advanced-features/email-automation",
    "text": "---\ntitle: Email automation\n---\n\nimport Layout from \"../../components/Layout\";\nimport Header from \"../../components/Header\";\n\nexport const meta = {\n  title: \"Email automation\",\n};\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n## Building an activation sequence in Buttondown\n\nUnfortunately, you can't right now. I'm working on an [API](https://www.notion.so/API-to-send-specific-extant-email-to-subscriber-ea8c13f6232f4f528bc3aa5017b46e3f) to let you do this, but in the meantime you can only specify a single **welcome email** to new subscribers. You can do this by going to your [Subscribing settings page](https://buttondown.email/settings/subscribing):\n\n![A screenshot of the settings page which allows sending a single welcome email.](/images/subscribing.png)\n\nThis is a pretty common request — perhaps the _most_ common feature request I get. I realize that I'm disappointing folks by not supporting it at the moment! The reason I don't is because it's opening a bag of worms. There's no such thing as \"just a simple welcome sequence\" — as soon as you specify a string of emails, you have to specify arbitrary lengths between those strings, branching logic, tracking, etc. etc. It's a complex feature that I don't think I would be able to build simply and in the style of the rest of the tool.\n",
    "title": "Email automation"
  },
  {
    "path": "/advanced-features/managing-multiple-newsletters",
    "text": "---\ntitle: Managing multiple newsletters\n---\n\nimport Layout from \"../../components/Layout\";\nimport BFPNotice from \"../../components/BFPNotice\";\n\nexport const meta = {\n  title: \"Customizing your emails\",\n};\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Managing multiple newsletters\n\n<BFPNotice />\n\nJust mosey on over to your [Account](https://buttondown.email/account) page and hit \"Add another newsletter\", towards the bottom:\n\n![A screenshot of the \"add newsletter\" button.](/images/add-newsletter.png)\n",
    "title": "Managing multiple newsletters"
  },
  {
    "path": "/advanced-features/markdown",
    "text": "---\ntitle: Markdown\n---\n\nimport Layout from \"../../components/Layout\";\n\nexport const meta = {\n  title: \"Markdown\",\n};\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Markdown\n\n## Buttondown's Markdown rendering engine\n\nButtondown's Markdown rendering engine is [Python-Markdown](https://github.com/Python-Markdown/markdown)\n\n### Extensions\n\nIn addition, Buttondown uses a handful of extensions:\n\n- [smarty](https://python-markdown.github.io/extensions/smarty/), to convert ASCII characters into HTML entities\n- [tables](https://python-markdown.github.io/extensions/tables/), to allow basic tables\n- [footnotes](https://python-markdown.github.io/extensions/footnotes/), to allow basic footnotes. (These are rendered in your online archives using [Bigfoot.js](http://www.bigfootjs.com))\n- [fenced_code](https://python-markdown.github.io/extensions/fenced_code_blocks/), to allow a more common approach for embedding code snippets\n- [pymdownx.tilde](https://facelessuser.github.io/pymdown-extensions/extensions/tilde/), for allowing of deletions and subscripts\n- [CodeHilite](https://python-markdown.github.io/extensions/code_hilite/), for syntax highlighting of code snippets\n\n### Embeds\n\nIn addition to all of _those_, Buttondown uses some proprietary extensions for embedding things like tweets, YouTube videos, and gifs — but none of these should affect your general rendering experience.\n\nIf you're looking for an escape hatch out of these embeds, they only trigger on links that are on self-contained lines, like the following:\n\n```markdown\nHere is a tweet I liked!\n\nhttps://twitter.com/rachsyme/status/1352057677359288321\n```\n\nSo you can avoid it by simply doing something like:\n\n```markdown\nHere is a tweet I liked!\n\n<div>https://twitter.com/rachsyme/status/1352057677359288321</div>\n```\n",
    "title": "Markdown"
  },
  {
    "path": "/advanced-features/metadata",
    "text": "---\ntitle: Metadata\n---\n\nimport Layout from \"../../components/Layout\";\n\nexport const meta = {\n  title: \"Metadata\",\n};\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n## What is metadata?\n\nThis is a great question! The short answer is \"structured key-value data\". As of this writing, you can only apply metadata to subscribers, meaning that you can attach any sort of key-value pairs you'd like to your subscribers. This can be things like identifying information such as first and last names, so you can apply \"mail merges\" to your newsletter; or it could be for internal use only, such as customer IDs to tie subscribers back to your web application.\n\nI'd recommend also reading up on [Stripe's explanation of metadata](https://stripe.com/docs/api/metadata) — Buttondown's implementation and philosophy behind it is very similar.\n\n## What constitutes valid metadata?\n\nInternally, metadata is stored as raw JSON, so you can be pretty liberal with what you place into it. (If you try and view or set metadata using the Buttondown interface, there will likely be some stringification issues — for complex use cases, it's recommended to use the API or an integration like Zapier.)\n\n## Searching for metadata\n\nYou can search for metadata in Buttondown by using the `key:value` notation. For instance, if you want to find all subscribers with a metadata key-value pair of `{\"location\": \"Seattle\"}`, you type in `location:seattle`:\n\n![A screenshot showing example results when one searches for metadata.](/images/searching-for-metadata.png)\n\nAt the moment, this does not work with more than one key-value pair; `location:seattle industry:finance` will not do what you would like it to. (It will _eventually_, though!)\n\n## Programmatically using metadata.\n\nInterested in setting metadata via the API? Check out the [API documentation](/api-reference/subscribers)!\n",
    "title": "Metadata"
  },
  {
    "path": "/advanced-features/monetizing-your-newsletter",
    "text": "---\ntitle: Monetizing your newsletter\n---\n\nimport Layout from \"../../components/Layout\";\n\nexport const meta = {\n  title: \"Monetizing your newsletter\",\n};\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Monetizing your newsletter\n\n## Tiers\n\nUnfortunately, tiers are not supported at this time.\n\n## Gift subscriptions\n\nGift subscriptions are available for paid newsletters — they're a way for you to manually gate in a subscriber who you want to receive premium emails even if they haven't paid. (Like, if they're friends or family or something like that.) From Buttondown's perspective, they are a paid subscriber, but the gift recipient will never be prompted to pay and will receive a notification that they've been gifted a premium subscription.\n\nAs of right now, gift subscriptions last forever. If you're interested in short-lived gift subscriptions, I recommend setting up a **free trial** for your paid newsletter!\n\n## How do subscribers cancel their premium subscription?\n\nCancelling a premium subscription is easy! Just unsubscribe from the newsletter just like any other one.\n\nIf you’re interested in remaining a free subscriber, re-subscribe and you’ll be back in business.\n\n## Disabling the credit card prompt for paid newsletters\n\nIf you have a newsletter that is specifically based on free trials or some other bespoke flow, you might find it useful to disable the credit card prompt so prospective subscribers aren't asked to pay as soon as they put in their credit card information.\n\nYou can do this by adding the `GET` param of `without_payment_prompt` to your URL.\n\nFor instance, if you had a paid newsletter at, say, `https://buttondown.email/weeknotes`, you'd change it to `https://buttondown.email/weeknotes?without_payment_prompt=true`!\n\n## Pay what you want\n\nIn particular, Buttondown now supports a **Pay What You Want** model if you want to allow your subscribers to be patrons and support your writing without gating any specific content. You can head over to the [Paid Subscriptions](http://buttondown.email/settings/paid-subscriptions) page to get started.\n\nAdditionally, you can do one of two things if you’re looking for something more akin to a patronage model:\n\n1. Set a payment tier for your paid newsletter and then only release “free” emails. This gives subscribers the ability to sustainably support your writing without actually gating any content behind that subscription.\n2. Drop a link in your newsletter to [ko-fi](<[https://ko-fi.com/](https://ko-fi.com/)>) or [Buy Me a Coffee](<[https://www.buymeacoffee.com/](https://www.buymeacoffee.com/)>) to let folks support your work if they are so inclined.\n\n## Mixing free and paid content\n\nYou specify each outgoing email as a \"free\" post going to all subscribers or a \"premium\" post going to just paid subscribers.\n\n## Letting premium subscribers view old premium emails\n\nTo grant your premium subscribers the ability to read your full back catalog, you have two options.\n\n### Using the Buttondown interface\n\nIf you go to your [subscribers](https://buttondown.email/subscribers?order=-creation_date&filter=&page=1) page and tap on a subscriber, you'll get a customized Archives link that you can manually send them which contains a full archive of all your posts, free and premium:\n\n![A screenshot of a selected subscriber and the concomitant \"Archives\" button.](/images/premium-archive-interface.png)\n\n### Using shortcodes\n\nIf you want to provide a link in your emails to each subscriber's paid archive, you can use the following shortcake:\n\n```html\n{{ premium_archive_link }}\n```\n\nThis generates a unique-per-subscriber ID for their paid specific paid archives. Like the link generated through Buttondown's interface, it will expire once the subscriber's paid subscription lapses. A common tactic is to reference it in your footer for _all_ paid subscribers, like so:\n\n```html\n{% if subscriber.subscription_type == \"premium\" %} You can always view your full\narchives [here]({{ premium_archive_link }}). {% endif %}\n```\n\n## Why Buttondown doesn't take a cut\n\nI have a longer, more rambling answer, but I'll start with the short version: **Buttondown makes money by charging for features and infrastructure**. Paid newsletters is a feature, not a business model: it is a capability you get.\n\n\"But aren't incentives aligned when you take a cut of my profit?\", you might find yourself asking.\n\nWell — _sort of_. It means that my incentives are very well aligned with a certain brand of writer/publication: one who is already making a whole lot of money, who has a very large social graph, and whose path of generating money is solely through paid subscriptions. There are lots of great writers who fit that profile — but most of my favorite newsletters do not. I want to make sure that I focus on the core parts of making Buttondown great: an elegant, useful interface and focus on the _writing_ experience, and I wanted to intentionally choose a pricing model that fits that.\n\n\"But you charge based on subscriber count!\", you might respond.\n\nYeah! I don't love that — it was explicitly designed to make sure that Buttondown doesn't have any customers who are _in the red,_ which is to say that they are a net-negative on my bottom line. I don't have venture capital; I want this to be a sustainable business for the next twenty years, and that means I need to make sure I at least break even for each customer. The \"pay-per-thousand subscribers\" pricing is successful at that, even if its inelegant and I'd rather have a more easily-digestible pricing model at some point in the future.\n\nOn a more business-minded note, I also feel that the current iteration of most paid subscription platforms — both inside and outside the world of newsletters — is a fairly naive wrapper around platform APIs like Stripe Connect. On a long-term (or even medium-term — say, three-to-five years) horizon, charging rent on top of those abstractions is not sustainable: the margin available for the taking is going to go down to zero, rather than 10% or whatever. It's important that I have a business model that is resilient to that happening.\n",
    "title": "Monetizing your newsletter"
  },
  {
    "path": "/advanced-features/template-variables",
    "text": "---\ntitle: Template variables\n---\n\nimport Layout from \"../../components/Layout\";\nimport Warning from \"../../components/Warning\";\nimport { H4, P, Code } from \"../../components/Markdown\";\nimport Table from \"../../components/Table\";\n\nexport const meta = {\n  title: \"Template variables\",\n};\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Template variables\n\n### Within your email\n\n<Table\n  columns={[\n    {\n      title: \"Variable\",\n      key: \"variable\",\n      component: (p) => <strong className=\"font-mono\">{p}</strong>,\n    },\n    {\n      title: \"Description\",\n      key: \"description\",\n    },\n    {\n      title: \"Example\",\n      key: \"example\",\n      component: (p) => <Code language=\"handlebars\">{p}</Code>,\n    },\n  ]}\n  content={[\n    {\n      variable: \"subscriber.metadata\",\n      description: \"Access to the metadata for a given subscriber\",\n      example:\n        \"Hi there, {{ subscriber.metadata.first_name }}! You're looking dapper today.\",\n    },\n    {\n      variable: \"subscriber.email\",\n      description: \"Access to the email address for a given subscriber\",\n      example: \"You signed up for this email via {{ subscriber.email }}.\",\n    },\n    {\n      variable: \"subscriber.tags\",\n      description: \"Access to the tag names of a given subscriber\",\n      example: `{% if \"python\" in subscriber.tags %}\nYou know, I bet you're interested in Python!\n{% elif \"html\" in subscriber.tags %}\nYou know, you strike me as a web developer.\n{% else %}\nI don't know what you're interested in!\n{% endif %}`,\n    },\n    {\n      variable: \"subject\",\n      description: \"The subject of the email you're sending out\",\n      example: `Today, we'll be discussing {{ subject }}.`,\n    },\n    {\n      variable: \"unsubscribe_url\",\n      description:\n        \"A personalized URL for the given subscriber to unsubscribe with\",\n      example:\n        \"Not interested in this email? No worries — [unsubscribe here]({{ unsubscribe_url }}).\",\n    },\n    {\n      variable: \"subscribe_url\",\n      description: \"A generic URL for your subscription page\",\n      example:\n        \"Did someone forward you this email? If so, you can [subscribe here]({{ subscribe_url }}).\",\n    },\n    {\n      variable: \"email_url\",\n      description: \"The permalink of the email being sent out\",\n      example: \"You can also view this email [online]({{ email_url }}).\",\n    },\n    {\n      variable: \"email.secondary_id\",\n      description: \"The issue number of the email being sent out\",\n      example: \"This is issue #{{ email.secondary_id }} of my newsletter!\",\n    },\n    {\n      variable: \"email.publish_date\",\n      description: \"The raw date time of the email being sent out\",\n      example: \"Sent on {{ email.publish_date }}.\",\n    },\n  ]}\n/>\n",
    "title": "Template variables"
  },
  {
    "path": "/api-reference/authentication",
    "text": "---\ntitle: Authentication\n---\n\nimport Layout from \"../../components/Layout\";\n\nexport const meta = {\n  title: \"Introduction to the API reference\",\n};\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Authentication\n\nClients should authenticate by passing the token key in the `Authorization` HTTP header, prepended with the string `Token `(note the trailing space!). For example:\n\n<code>Authorization: Token 401f7ac837da42b97f613d789819ff93537bee6a</code>\n\nYou can find your API key in your [Programming page](https://buttondown.email/settings/programming).\n",
    "title": "Authentication"
  },
  {
    "path": "/api-reference/changelog",
    "text": "---\ntitle: Changelog\n---\n\nimport Layout from \"../../components/Layout\";\n\nexport const meta = {\n  title: \"Changelog\",\n};\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Changelog\n\nThe changelog provides a list of dated updates, each of which contains a number of potentially backwards-incompatible changes. There is no explicit versioning in the API at this time; all changes will be either compatible or breaking. (If I attempt any brittle changes to the API that may break current implementations, I'll be sure to add version gates.)\n\n### 2021-01-02\n\nAdded support to set and retrieve metadata on Emails.\n\n### 2020-12-23\n\nAdded deletion and update abilities to the Scheduled emails endpoint, giving you much more programmability than the hitherto append-only state of the world.\n\n### 2020-12-09\n\nAdded a deletion endpoint to the Images endpoint, allowing you to delete unused images.\n",
    "title": "Changelog"
  },
  {
    "path": "/api-reference/drafts/",
    "text": "---\ntitle: Drafts\n---\n\nimport Layout from \"../../../components/Layout\";\nimport ResponsesTable from \"../../../components/api/ResponsesTable\";\nimport ObjectDescription from \"../../../components/api/ObjectDescription\";\nimport ParametersTable from \"../../../components/api/ParametersTable\";\nimport Endpoint from \"../../../components/api/Endpoint\";\nimport DATA from \"./metadata.json\";\n\nexport const meta = {\n  title: DATA.title,\n};\n\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Drafts\n\n## The draft object\n\nA draft looks like this:\n\n<ObjectDescription\n  example={JSON.stringify(DATA.object, null, 4)}\n  fields={[\n    { field: \"creation_date\", type: \"datetime\", description: \"\" },\n    { field: \"id\", type: \"uuid\" },\n    { field: \"subject\", type: \"string\" },\n    { field: \"body\", type: \"string\" },\n  ]}\n/>\n\n<Endpoint title=\"Listing drafts\" method=\"GET\" path={DATA.endpoint} />\n<ParametersTable\n  content={[\n    {\n      parameter: \"page\",\n      type: \"string\",\n      description: \"A page number within the paginated result set.\",\n      example: \"\",\n      optional: true,\n    },\n  ]}\n/>\n<ResponsesTable\n  content={[\n    {\n      Status: \"200\",\n      description: \"\",\n      \"Sample Response\": {\n        count: 1,\n        next: \"foo\",\n        previous: null,\n        results: [DATA.object],\n      },\n    },\n  ]}\n/>\n\n---\n\n<Endpoint title=\"Creating a new draft\" method=\"POST\" path={DATA.endpoint} />\n<ParametersTable\n  content={[\n    {\n      parameter: \"body\",\n      type: \"string\",\n      description: \"\",\n      optional: false,\n    },\n    {\n      parameter: \"subject\",\n      type: \"string\",\n      description: \"\",\n      optional: false,\n    },\n  ]}\n/>\n<ResponsesTable\n  content={[\n    {\n      Status: \"201\",\n      description: \"\",\n      \"Sample Response\": DATA.object,\n    },\n  ]}\n/>\n\n---\n\n<Endpoint\n  title=\"Retrieving a specific draft\"\n  method=\"GET\"\n  path={DATA.endpoint + \"/<id>\"}\n/>\n<ResponsesTable\n  content={[\n    {\n      Status: \"200\",\n      description: \"\",\n      \"Sample Response\": DATA.object,\n    },\n  ]}\n/>\n",
    "title": "Drafts"
  },
  {
    "path": "/api-reference/emails/",
    "text": "---\ntitle: Emails\n---\n\nimport Layout from \"../../../components/Layout\";\nimport ResponsesTable from \"../../../components/api/ResponsesTable\";\nimport ObjectDescription from \"../../../components/api/ObjectDescription\";\nimport ParametersTable from \"../../../components/api/ParametersTable\";\nimport ClosedBetaNotice from \"../../../components/api/ClosedBetaNotice\";\nimport Endpoint from \"../../../components/api/Endpoint\";\nimport DATA from \"./metadata.json\";\n\nexport const meta = {\n  title: DATA.title,\n};\n\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Emails\n\nEmails are what you're for here on Buttondown at the end of the day, right? Creating an email via the API is just like creating one in the interface; it will instantly trigger sending actual emails, based on the tags and email type you provide.\n\n## The email object\n\nAn email looks like this:\n\n<ObjectDescription\n  example={JSON.stringify(DATA.object, null, 4)}\n  fields={[\n    { field: \"id\", type: \"uuid\" },\n    { field: \"creation_date\", type: \"datetime\", description: \"\" },\n    { field: \"publish_date\", type: \"datetime\", description: \"\" },\n    { field: \"subject\", type: \"string\" },\n    { field: \"body\", type: \"string\" },\n    { field: \"included_tags\", type: \"array<string> | array<uuid>\" },\n    { field: \"excluded_tags\", type: \"array<string> | array<uuid>\" },\n    { field: \"metadata\", type: \"map\" },\n  ]}\n/>\n\n<Endpoint title=\"Listing emails\" method=\"GET\" path={DATA.endpoint} />\n<ParametersTable\n  content={[\n    {\n      parameter: \"page\",\n      type: \"string\",\n      description: \"A page number within the paginated result set.\",\n      example: \"\",\n      optional: true,\n    },\n  ]}\n/>\n<ResponsesTable\n  content={[\n    {\n      Status: \"200\",\n      description: \"\",\n      \"Sample Response\": {\n        count: 1,\n        next: \"foo\",\n        previous: null,\n        results: [DATA.object],\n      },\n    },\n  ]}\n/>\n\n---\n\n<Endpoint title=\"Sending an email\" method=\"POST\" path={DATA.endpoint} />\n<ParametersTable\n  content={[\n    {\n      parameter: \"body\",\n      type: \"string\",\n      description: \"\",\n      optional: false,\n    },\n    {\n      parameter: \"subject\",\n      type: \"string\",\n      description: \"\",\n      optional: false,\n    },\n    {\n      parameter: \"email_type\",\n      type: \"string\",\n      description: \"\",\n      optional: true,\n    },\n    {\n      parameter: \"excluded_tags\",\n      type: \"array<string> | array<uuid>\",\n      description: \"\",\n      optional: true,\n    },\n    {\n      parameter: \"included_tags\",\n      type: \"array<string> | array<uuid>\",\n      description: \"\",\n      optional: true,\n    },\n    {\n      parameter: \"metadata\",\n      type: \"map\",\n      description: \"\",\n      optional: true,\n    },\n  ]}\n/>\n<ResponsesTable\n  content={[\n    {\n      Status: \"201\",\n      description: \"\",\n      \"Sample Response\": DATA.object,\n    },\n  ]}\n/>\n\n---\n\n<Endpoint\n  title=\"Retrieving a specific email\"\n  method=\"GET\"\n  path={DATA.endpoint + \"/<id>\"}\n/>\n<ResponsesTable\n  content={[\n    {\n      Status: \"200\",\n      description: \"\",\n      \"Sample Response\": DATA.object,\n    },\n  ]}\n/>\n",
    "title": "Emails"
  },
  {
    "path": "/api-reference/events-and-webhooks",
    "text": "---\ntitle: Events and webhooks\n---\n\nimport Layout from \"../../components/Layout\";\nimport Table from \"../../components/Table\";\nimport EVENT_TYPES from \"./event_types.json\";\n\nexport const meta = {\n  title: \"Events & webhooks\",\n};\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Events and Webhooks\n\nEvents are Buttondown's way of telling you that something interesting has happened to your newsletter, and webhooks are Buttondown's\nway of letting you react to various incoming events. For example, when a new subscriber signs up for your newsletter, Buttondown creates\nand emits a `subscriber.created` event; when that subscriber unsubscribes, Buttondown creates a `subscriber.unsubscribed` event. If you wanted\nto, say, create a Slack notification or run some application code whenever something in Buttondown happens, you'd create a webhook for the concomitant\nevent and point it towards your application.\n\nThe payload of most events are fairly simple, and look something like this:\n\n    {\n      \"event_type\": \"subscriber.confirmed\",\n      \"payload\": {\n        \"subscriber\": \"ac79483b-cd28-49c1-982e-8a88e846d7e7\"\n      }\n    }\n\n## Events\n\n<Table\n  columns={[{ title: \"Event type\", key: \"name\" }, { title: \"description\" }]}\n  content={EVENT_TYPES}\n/>\n",
    "title": "Events and webhooks"
  },
  {
    "path": "/api-reference/images/",
    "text": "---\ntitle: Images\n---\n\nimport Layout from \"../../../components/Layout\";\nimport ResponsesTable from \"../../../components/api/ResponsesTable\";\nimport ObjectDescription from \"../../../components/api/ObjectDescription\";\nimport ParametersTable from \"../../../components/api/ParametersTable\";\nimport Endpoint from \"../../../components/api/Endpoint\";\nimport DATA from \"./metadata.json\";\n\nexport const meta = {\n  title: DATA.title,\n};\n\nexport const serializedImage = JSON.stringify(DATA.object, null, 4);\n\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Images\n\nImages are, well, images! Buttondown allows you to upload images to its secure [S3](https://aws.amazon.com/s3/) bucket and do with them what you will. This is sort of an odd duck of an API, to be sure, but if you want to be able to do things like draft and send emails completely on your iPad you need a surefire way of creating images.\n\n## The image object\n\nAn image looks like this:\n\n<ObjectDescription\n  example={serializedImage}\n  fields={[\n    { field: \"creation_date\", type: \"datetime\", description: \"\" },\n    { field: \"id\", type: \"uuid\" },\n    { field: \"image\", type: \"string\" },\n  ]}\n/>\n\n<Endpoint title=\"Listing images\" method=\"GET\" path={DATA.endpoint} />\n<ParametersTable\n  content={[\n    {\n      parameter: \"page\",\n      type: \"string\",\n      description: \"A page number within the paginated result set.\",\n      example: \"\",\n      optional: true,\n    },\n  ]}\n/>\n<ResponsesTable\n  content={[\n    {\n      Status: \"200\",\n      description: \"\",\n      \"Sample Response\": {\n        count: 1,\n        next: \"foo\",\n        previous: null,\n        results: [JSON.parse(serializedImage)],\n      },\n    },\n  ]}\n/>\n\n---\n\n<Endpoint title=\"Uploading a new image\" method=\"POST\" path={DATA.endpoint} />\n<ParametersTable\n  content={[\n    {\n      parameter: \"image\",\n      type: \"string <binary>\",\n      description: \"\",\n      optional: false,\n    },\n  ]}\n/>\n<ResponsesTable\n  content={[\n    {\n      Status: \"201\",\n      description: \"\",\n      \"Sample Response\": serializedImage,\n    },\n  ]}\n/>\n\n---\n\n<Endpoint\n  title=\"Deleting an image\"\n  method=\"DELETE\"\n  path={DATA.endpoint + \"/<id>\"}\n/>\n<ResponsesTable\n  content={[\n    {\n      Status: \"204\",\n      description: \"\",\n      \"Sample Response\": {},\n    },\n  ]}\n/>\n\n---\n\n<Endpoint\n  title=\"Retrieving a specific image\"\n  method=\"GET\"\n  path={DATA.endpoint + \"/<id>\"}\n/>\n<ResponsesTable\n  content={[\n    {\n      Status: \"200\",\n      description: \"\",\n      \"Sample Response\": serializedImage,\n    },\n  ]}\n/>\n",
    "title": "Images"
  },
  {
    "path": "/api-reference/introduction",
    "text": "---\ntitle: Introduction\n---\n\nimport Layout from \"../../components/Layout\";\n\n# Introduction\n\nHello and welcome to Buttondown's API schema!\n\nI've designed Buttondown's API to be as RESTful and uninteresting as possible: if there's a primitive in Buttondown, you should have a nice interface for it, with the ability to retrieve, create, modify, and delete. This means that with a few lines in your language of choice, you're able to programmatically keep track of your subscribers, send out new emails, and more.\n\nIf you're confused about what Buttondown is, try going to [buttondown.email](https://buttondown.email).\n\nIf you're looking for where to find your API Key, check your [Programming page](https://buttondown.email/settings/programming).\n\nWhenever Buttondown's API changes, those changes will be posted on the [changelog](/api-reference/changelog) and on [Twitter](https://twitter.com/buttondown).\n\nKeeping our API reference accurate, up-to-date and easy to understand is really important. If you have any questions, spot any mistakes or want to give us any feedback, just drop me a line!\n\nLastly, if you'd like to just download the OpenAPI spec for Buttondown, you can do so [here](/schema.yaml).\n\nexport const meta = {\n  title: \"Introduction to the API reference\",\n};\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n",
    "title": "Introduction"
  },
  {
    "path": "/api-reference/newsletters/",
    "text": "---\ntitle: Newsletters\n---\n\nimport Layout from \"../../../components/Layout\";\nimport ResponsesTable from \"../../../components/api/ResponsesTable\";\nimport ObjectDescription from \"../../../components/api/ObjectDescription\";\nimport ParametersTable from \"../../../components/api/ParametersTable\";\nimport ClosedBetaNotice from \"../../../components/api/ClosedBetaNotice\";\nimport Endpoint from \"../../../components/api/Endpoint\";\nimport DATA from \"./metadata.json\";\n\nexport const meta = {\n  title: DATA.title,\n};\n\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Newsletters\n\n## The newsletter object\n\nA newsletter looks like this:\n\n<ObjectDescription\n  example={JSON.stringify(DATA.object, null, 4)}\n  fields={[\n    { field: \"creation_date\", type: \"datetime\", description: \"\" },\n    { field: \"id\", type: \"uuid\" },\n    { field: \"description\", type: \"string\" },\n    { field: \"name\", type: \"string\" },\n    { field: \"username\", type: \"string\" },\n    { field: \"api_key\", type: \"string\" },\n  ]}\n/>\n\n<Endpoint title=\"Listing newsletters\" method=\"GET\" path={DATA.endpoint} beta />\n<ParametersTable\n  content={[\n    {\n      parameter: \"page\",\n      type: \"string\",\n      description: \"A page number within the paginated result set.\",\n      example: \"\",\n      optional: true,\n    },\n  ]}\n/>\n<ResponsesTable\n  content={[\n    {\n      Status: \"200\",\n      description: \"\",\n      \"Sample Response\": {\n        count: 1,\n        next: \"foo\",\n        previous: null,\n        results: [DATA.object],\n      },\n    },\n  ]}\n/>\n\n---\n\n<Endpoint\n  title=\"Creating a new newsletter\"\n  method=\"POST\"\n  path={DATA.endpoint}\n  beta\n/>\n<ParametersTable\n  content={[\n    {\n      parameter: \"name\",\n      type: \"string\",\n      description: \"\",\n      optional: false,\n    },\n    {\n      parameter: \"username\",\n      type: \"string\",\n      description: \"\",\n      optional: false,\n    },\n    {\n      parameter: \"description\",\n      type: \"string\",\n      description: \"\",\n      optional: false,\n    },\n  ]}\n/>\n<ResponsesTable\n  content={[\n    {\n      Status: \"201\",\n      description: \"\",\n      \"Sample Response\": DATA.object,\n    },\n  ]}\n/>\n\n---\n\n<Endpoint\n  title=\"Retrieving a specific newsletter\"\n  method=\"GET\"\n  path={DATA.endpoint + \"/<id>\"}\n  beta\n/>\n<ResponsesTable\n  content={[\n    {\n      Status: \"200\",\n      description: \"\",\n      \"Sample Response\": DATA.object,\n    },\n  ]}\n/>\n\n---\n\n<Endpoint\n  title=\"Deleting a specific newsletter\"\n  method=\"DELETE\"\n  path={DATA.endpoint + \"/<id>\"}\n  beta\n/>\n<ResponsesTable\n  content={[\n    {\n      Status: \"204\",\n      description: \"\",\n      \"Sample Response\": {},\n    },\n  ]}\n/>\n\n---\n\n<Endpoint\n  title=\"Updating a specific newsletter\"\n  method=\"PATCH\"\n  path={DATA.endpoint + \"/<id>\"}\n  beta\n/>\n<ResponsesTable\n  content={[\n    {\n      Status: \"200\",\n      description: \"\",\n      \"Sample Response\": DATA.object,\n    },\n  ]}\n/>\n",
    "title": "Newsletters"
  },
  {
    "path": "/api-reference/scheduled-emails/",
    "text": "---\ntitle: Scheduled emails\n---\n\nimport Layout from \"../../../components/Layout\";\nimport ResponsesTable from \"../../../components/api/ResponsesTable\";\nimport ObjectDescription from \"../../../components/api/ObjectDescription\";\nimport ParametersTable from \"../../../components/api/ParametersTable\";\nimport ClosedBetaNotice from \"../../../components/api/ClosedBetaNotice\";\nimport Endpoint from \"../../../components/api/Endpoint\";\nimport DATA from \"./metadata.json\";\n\nexport const meta = {\n  title: DATA.title,\n};\n\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Scheduled emails\n\nScheduled emails are analogous to, well, scheduled emails; emails that you create to be sent at some point in the future. Depending on your integration, it might make more sense for you to create scheduled emails ahead of time rather than wait to create an email at exactly the time you want it going out (and, just like emails scheduled via Buttondown's UI, scheduled emails created via the API will automatically be sent out without requiring any further intervention.)\n\n## The scheduled email object\n\nA scheduled email looks like this:\n\n<ObjectDescription\n  example={JSON.stringify(DATA.object, null, 4)}\n  fields={[\n    { field: \"id\", type: \"uuid\" },\n    { field: \"creation_date\", type: \"datetime\", description: \"\" },\n    { field: \"publish_date\", type: \"datetime\", description: \"\" },\n    { field: \"subject\", type: \"string\" },\n    { field: \"body\", type: \"string\" },\n    { field: \"included_tags\", type: \"array<string> | array<uuid>\" },\n    { field: \"excluded_tags\", type: \"array<string> | array<uuid>\" },\n  ]}\n/>\n\n<Endpoint title=\"Listing scheduled emails\" method=\"GET\" path={DATA.endpoint} />\n<ParametersTable\n  content={[\n    {\n      parameter: \"page\",\n      type: \"string\",\n      description: \"A page number within the paginated result set.\",\n      example: \"\",\n      optional: true,\n    },\n  ]}\n/>\n<ResponsesTable\n  content={[\n    {\n      Status: \"200\",\n      description: \"\",\n      \"Sample Response\": {\n        count: 1,\n        next: \"foo\",\n        previous: null,\n        results: [DATA.object],\n      },\n    },\n  ]}\n/>\n\n---\n\n<Endpoint\n  title=\"Scheduling a new email to be sent\"\n  method=\"POST\"\n  path={DATA.endpoint}\n/>\n<ParametersTable\n  content={[\n    {\n      parameter: \"body\",\n      type: \"string\",\n      description: \"\",\n      optional: false,\n    },\n    {\n      parameter: \"subject\",\n      type: \"string\",\n      description: \"\",\n      optional: false,\n    },\n    {\n      parameter: \"publish_date\",\n      type: \"datetime\",\n      description: \"\",\n      optional: false,\n    },\n    {\n      parameter: \"email_type\",\n      type: \"string\",\n      description: \"\",\n      optional: true,\n    },\n    {\n      parameter: \"excluded_tags\",\n      type: \"array<string> | array<uuid>\",\n      description: \"\",\n      optional: true,\n    },\n    {\n      parameter: \"included_tags\",\n      type: \"array<string> | array<uuid>\",\n      description: \"\",\n      optional: true,\n    },\n  ]}\n/>\n<ResponsesTable\n  content={[\n    {\n      Status: \"201\",\n      description: \"\",\n      \"Sample Response\": DATA.object,\n    },\n  ]}\n/>\n\n---\n\n<Endpoint\n  title=\"Retrieving a specific scheduled email\"\n  method=\"GET\"\n  path={DATA.endpoint + \"/<id>\"}\n/>\n<ResponsesTable\n  content={[\n    {\n      Status: \"200\",\n      description: \"\",\n      \"Sample Response\": DATA.object,\n    },\n  ]}\n/>\n\n---\n\n<Endpoint\n  title=\"Deleting a specific scheduled email\"\n  method=\"DELETE\"\n  path={DATA.endpoint + \"/<id>\"}\n/>\n<ResponsesTable\n  content={[\n    {\n      Status: \"204\",\n      description: \"\",\n      \"Sample Response\": {},\n    },\n  ]}\n/>\n\n---\n\n<Endpoint\n  title=\"Updating or rescheduling a specific scheduled email\"\n  method=\"PATCH\"\n  path={DATA.endpoint + \"/<id>\"}\n/>\n<ResponsesTable\n  content={[\n    {\n      Status: \"200\",\n      description: \"\",\n      \"Sample Response\": DATA.object,\n    },\n  ]}\n/>\n",
    "title": "Scheduled emails"
  },
  {
    "path": "/api-reference/subscribers/",
    "text": "---\ntitle: Subscribers\n---\n\nimport Layout from \"../../../components/Layout\";\nimport Table from \"../../../components/Table\";\nimport ObjectDescription from \"../../../components/api/ObjectDescription\";\nimport ParametersTable from \"../../../components/api/ParametersTable\";\nimport ResponsesTable from \"../../../components/api/ResponsesTable\";\nimport Endpoint from \"../../../components/api/Endpoint\";\nimport ClosedBetaNotice from \"../../../components/api/ClosedBetaNotice\";\nimport { MDXProvider } from \"@mdx-js/react\";\nimport { H2, H1, P, H3, H4, Pre, Code } from \"../../../components/Markdown\";\nimport { CheckCircleIcon } from \"@heroicons/react/outline\";\nimport DATA from \"./metadata.json\";\n\nexport const custom = () => <h1 {...props} className=\"text-xl font-light\" />;\n\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\nexport const meta = {\n  title: \"Subscribers\",\n};\n\n# Subscribers\n\nSubscribers are the main way you collect email addresses and recipients on Buttondown.\nThey're what you see on your [subscribers page](https://buttondown.email/subscribers).\n\n## The subscriber object\n\nA subscriber looks like this:\n\n<ObjectDescription\n  example={JSON.stringify(DATA.object, null, 4)}\n  fields={[\n    { field: \"creation_date\", type: \"datetime\", description: \"\" },\n    { field: \"email\", type: \"string\" },\n    { field: \"id\", type: \"uuid\" },\n    { field: \"metadata\", type: \"map\" },\n    { field: \"notes\", type: \"string\" },\n    { field: \"referrer_url\", type: \"url\" },\n    { field: \"secondary_id\", type: \"int\" },\n    {\n      field: \"subscriber_type\",\n      type: <a href=\"#subscriber-type\">SubscriberType</a>,\n    },\n    { field: \"source\", type: \"string\" },\n    { field: \"tags\", type: \"array<uuid>\" },\n    { field: \"utm_campaign\", type: \"string\" },\n    { field: \"utm_medium\", type: \"string\" },\n    { field: \"utm_source\", type: \"string\" },\n  ]}\n/>\n\n---\n\n## Listing subscribers\n\n<Endpoint method=\"GET\" path=\"/v1/subscribers\" />\n\n<ParametersTable\n  content={[\n    {\n      parameter: \"type\",\n      type: \"string\",\n      description: `\n      An optional filter to allow you to only retrieve a subset of subscribers. The API accepts the values listed below.\n    `,\n      example: \"\",\n    },\n    {\n      parameter: \"tag\",\n      type: \"string\",\n      description:\n        \"An optional filter allowing you to filter subscribers based on a given tag. Provide the ID of the tag, not the name.\",\n      example: \"\",\n    },\n    {\n      parameter: \"email\",\n      type: \"string\",\n      description:\n        \"An optional filter allowing you to filter subscribers based on a substring. Providing a value of `doe` would match both `jane.doe@gmail.com` and `john.doe@gmail.com`, but not `jane.dooe@gmail.com`.\",\n      example: \"\",\n    },\n    {\n      parameter: \"page\",\n      type: \"string\",\n      description: \"A page number within the paginated result set.\",\n      example: \"\",\n    },\n    {\n      parameter: \"ordering\",\n      type: \"string\",\n      description: \"Which field to use when ordering the results.\",\n      example: \"\",\n    },\n  ]}\n/>\n\n<a name=\"subscriber-type\"></a>\n\n#### Subscriber types\n\n<Table\n  columns={[\n    {\n      title: \"type\",\n      component: (s) => <span className=\"font-mono\">{s}</span>,\n    },\n    { title: \"description\" },\n  ]}\n  content={[\n    {\n      type: \"regular\",\n      description:\n        \"normal subscribers who have not unsubscribed or deactivated in any way\",\n    },\n    {\n      type: \"removed\",\n      description:\n        \"subscribers who have been explicitly removed by the newsletter (notably, this does not mean unsubscribers: use /v1/unsubscribers for that!)\",\n    },\n    {\n      type: \"unactivated\",\n      description:\n        \"subscribers who have not yet confirmed their email or opted in\",\n    },\n    {\n      type: \"unpaid\",\n      description:\n        \"subscribers who have not yet purchased a subscription to your newsletter\",\n    },\n    {\n      type: \"premium\",\n      description: \"subscribers with active premium subscriptions\",\n    },\n    {\n      type: \"gifted\",\n      description:\n        \"subscriebers that have been gifted free premium subscriptions\",\n    },\n    {\n      type: \"unsubscribed\",\n      description:\n        \"subscribers that have voluntarily unsubscribed from your newsletter\",\n    },\n    {\n      type: \"spammy\",\n      description:\n        \"subscribers that have been deemed spammy by Buttondown's automated systems\",\n    },\n    {\n      type: \"trialed\",\n      description:\n        \"subscribers that are temporarily receiving a premium subscription to your newsletter\",\n    },\n    {\n      type: \"paused\",\n      description:\n        \"subscribers that are on a temporary hold from their premium subscription, but are still subscribed to your newsletter\",\n    },\n  ]}\n/>\n\n<ResponsesTable\n  content={[\n    {\n      Status: \"200\",\n      description: \"\",\n      \"Sample Response\": {\n        count: 1,\n        next: \"foo\",\n        previous: null,\n        results: [DATA.object],\n      },\n    },\n  ]}\n/>\n\n---\n\n<Endpoint\n  title=\"Creating a new subscriber\"\n  method=\"POST\"\n  path=\"/v1/subscribers\"\n/>\n\nIf Buttondown cannot create a new subscriber with the email address you've provided, there are a few likely reasons why. They're enumerated below:\n\n- A subscriber with that email has already been unsubscribed.\n- That email address (justin@gmail.com) is already subscribed.\n- That email address (justin@gmail.com) is already subscribed, but has not confirmed their email.\n- That email address (justin@gmail.com) is already subscribed, but has not provided payment.\n\n<ParametersTable\n  content={[\n    {\n      parameter: \"email\",\n      type: \"string\",\n      description: \"\",\n      optional: false,\n    },\n    {\n      parameter: \"metadata\",\n      type: \"map\",\n      description: \"\",\n      optional: true,\n    },\n    {\n      parameter: \"notes\",\n      type: \"map\",\n      description: \"\",\n      optional: true,\n    },\n    {\n      parameter: \"referrer_url\",\n      type: \"string\",\n      description: \"\",\n      optional: true,\n    },\n    {\n      parameter: \"tags\",\n      type: \"array<string> | array<uuid>\",\n      description: \"\",\n      optional: true,\n    },\n  ]}\n/>\n\n<ResponsesTable\n  content={[\n    {\n      Status: \"201\",\n      description: \"\",\n      \"Sample Response\": DATA.object,\n    },\n    {\n      Status: \"400\",\n      description:\n        \"If the email is invalid for any reason or if the subscriber already exists in our system.\",\n      \"Sample Response\": {},\n    },\n  ]}\n/>\n\n---\n\n<Endpoint\n  title=\"Updating a subscriber\"\n  method=\"PATCH\"\n  path=\"/v1/subscribers/<id>\"\n/>\n\n<ParametersTable\n  content={[\n    {\n      parameter: \"email\",\n      type: \"string\",\n      description: \"\",\n      optional: false,\n    },\n    {\n      parameter: \"metadata\",\n      type: \"map\",\n      description: \"\",\n      optional: true,\n    },\n    {\n      parameter: \"notes\",\n      type: \"map\",\n      description: \"\",\n      optional: true,\n    },\n    {\n      parameter: \"referrer_url\",\n      type: \"string\",\n      description: \"\",\n      optional: true,\n    },\n    {\n      parameter: \"tags\",\n      type: \"array<string> | array<uuid>\",\n      description: \"\",\n      optional: true,\n    },\n  ]}\n/>\n\n<ResponsesTable\n  content={[\n    {\n      Status: \"200\",\n      description: \"\",\n      \"Sample Response\": DATA.object,\n    },\n  ]}\n/>\n\n---\n\n<Endpoint\n  title=\"Deleting a subscriber\"\n  method=\"DELETE\"\n  path=\"/v1/subscribers/<id>\"\n/>\n\n<ResponsesTable\n  content={[\n    {\n      Status: \"204\",\n      description: \"\",\n      \"Sample Response\": {},\n    },\n  ]}\n/>\n\n---\n\n<Endpoint\n  title=\"Retrieving a specific subscriber\"\n  method=\"GET\"\n  path=\"/v1/subscribers/<id>\"\n/>\n<ResponsesTable\n  content={[\n    {\n      Status: \"200\",\n      description: \"\",\n      \"Sample Response\": DATA.object,\n    },\n  ]}\n/>\n\n---\n\n<Endpoint\n  title=\"Sending an email to a specific subscriber\"\n  method=\"POST\"\n  path=\"/v1/subscribers/<id>/emails/<email_id>\"\n  beta\n/>\n\n<ResponsesTable\n  content={[\n    {\n      Status: \"200\",\n      description: \"\",\n      \"Sample Response\": {},\n    },\n  ]}\n/>\n",
    "title": "Subscribers"
  },
  {
    "path": "/api-reference/tags/",
    "text": "---\ntitle: Tags\n---\n\nimport Layout from \"../../../components/Layout\";\nimport ResponsesTable from \"../../../components/api/ResponsesTable\";\nimport ObjectDescription from \"../../../components/api/ObjectDescription\";\nimport ParametersTable from \"../../../components/api/ParametersTable\";\nimport Endpoint from \"../../../components/api/Endpoint\";\nimport DATA from \"./metadata.json\";\n\nexport const meta = {\n  title: DATA.title,\n};\n\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Tags\n\n## The tag object\n\nA tag looks like this:\n\n<ObjectDescription\n  example={JSON.stringify(DATA.object, null, 4)}\n  fields={[\n    { field: \"creation_date\", type: \"datetime\", description: \"\" },\n    { field: \"id\", type: \"uuid\" },\n    { field: \"name\", type: \"string\" },\n    { field: \"description\", type: \"string\" },\n    { field: \"color\", type: \"string\" },\n  ]}\n/>\n\n<Endpoint title=\"Listing tags\" method=\"GET\" path={DATA.endpoint} />\n<ParametersTable\n  content={[\n    {\n      parameter: \"page\",\n      type: \"string\",\n      description: \"A page number within the paginated result set.\",\n      example: \"\",\n      optional: true,\n    },\n  ]}\n/>\n<ResponsesTable\n  content={[\n    {\n      Status: \"200\",\n      description: \"\",\n      \"Sample Response\": {\n        count: 1,\n        next: \"foo\",\n        previous: null,\n        results: [DATA.object],\n      },\n    },\n  ]}\n/>\n\n---\n\n<Endpoint title=\"Creating a new tag\" method=\"POST\" path={DATA.endpoint} />\n<ParametersTable\n  content={[\n    {\n      parameter: \"name\",\n      type: \"string\",\n      description: \"\",\n      optional: false,\n    },\n    {\n      parameter: \"color\",\n      type: \"string\",\n      description: \"\",\n      optional: true,\n    },\n    {\n      parameter: \"description\",\n      type: \"string\",\n      description: \"\",\n      optional: true,\n    },\n  ]}\n/>\n<ResponsesTable\n  content={[\n    {\n      Status: \"201\",\n      description: \"\",\n      \"Sample Response\": DATA.object,\n    },\n  ]}\n/>\n\n---\n\n<Endpoint\n  title=\"Deleting a tag\"\n  method=\"DELETE\"\n  path={DATA.endpoint + \"/<id>\"}\n/>\n<ResponsesTable\n  content={[\n    {\n      Status: \"204\",\n      description: \"\",\n      \"Sample Response\": {},\n    },\n  ]}\n/>\n\n---\n\n<Endpoint\n  title=\"Retrieving a specific tag\"\n  method=\"GET\"\n  path={DATA.endpoint + \"/<id>\"}\n/>\n<ResponsesTable\n  content={[\n    {\n      Status: \"200\",\n      description: \"\",\n      \"Sample Response\": DATA.object,\n    },\n  ]}\n/>\n",
    "title": "Tags"
  },
  {
    "path": "/behind-the-scenes/esoterica",
    "text": "---\ntitle: Esoterica\n---\n\nimport Layout from \"../../components/Layout\";\nimport Warning from \"../../components/Warning\";\nimport { H4, P } from \"../../components/Markdown\";\nimport Table from \"../../components/Table\";\n\nexport const meta = {\n  title: \"Esoterica\",\n};\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Esoterica\n\n## My favorite newsletters\n\nWant to read some of my favorites for inspiration? (Don't worry, they're not my favorites just because they're on Buttondown — as you'll see from some of the links!)\n\n- [Money Stuff](https://www.bloomberg.com/authors/ARbTQlRLRjE/matthew-s-levine) by **_Matt Levine_**\n- [Dept. of Enthusiasm](https://www.jezburrows.com/enthusiasm/#:~:text=of%20Enthusiasm-,Dept.,city%2C%20maybe%20a%20single%20sentence.) by **_Jez Burrows_**\n- [Cryptography Dispatches](https://buttondown.email/cryptography-dispatches) by **_Filippo Valsorda_**\n- [Letters to Summer](https://letterstosummer.com/) by **_Summer and Jillian_**\n",
    "title": "Esoterica"
  },
  {
    "path": "/getting-started/billing",
    "text": "---\ntitle: Billing\n---\n\nimport Layout from \"../../components/Layout\";\nimport Warning from \"../../components/Warning\";\nimport WIPNotice from \"../../components/WIPNotice\";\nimport { H4, P } from \"../../components/Markdown\";\n\nexport const meta = {\n  title: \"Billing\",\n};\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Billing\n\n<WIPNotice />\n\n### Reaching the free tier's cap\n\nButtondown is free for your **first thousand subscribers** and requires a small monthly fee for more than that, because sending emails and running servers ain't cheap! (You can read more on our [pricing page](https://buttondown.email/pricing).)\n\nThat being said, it would be awful if you suddenly hit a thousand subscribers and didn't have a chance to register a credit card and so additional subscribers would be shown the door — that doesn't happen! You can continue to accrue subscribers past a thousand, you just can't send any emails to them until you fill out your [billing information](https://buttondown.email/settings/billing).\n\n### Non-profit discount\n\nButtondown does not offer a non-profit discount at the moment.\n\n### Annual discount\n\nYes! Two months free every year with an annual purchase. Email me and I'll get you set up.\n",
    "title": "Billing"
  },
  {
    "path": "/getting-started/building-your-subscriber-base",
    "text": "---\ntitle: Building your subscriber base\n---\n\nimport Layout from \"../../components/Layout\";\nimport Warning from \"../../components/Warning\";\nimport { H4, P } from \"../../components/Markdown\";\n\nexport const meta = {\n  title: \"Building your subscriber base\",\n};\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Building your subscriber base\n\n## Using HTML\n\nGo over to the [embedding and sharing page](https://buttondown.email/share) and Buttondown will walk you through exactly how this is done:\n\n![A screenshot of the embedding and sharing page.](/images/embed-form.png)\n\n## Tagging your subscribers\n\nIf you're using Buttondown's subscribe page (e.g. `https://buttondown.email/jmduke`), you can automatically add new tags to new subscribers by adding a **query parameter** to the URL, such as:\n\n```markup\nhttps://buttondown.email/jmduke?tag=python\n```\n\nThis will automatically give folks who subscribe through the link a tag named `python`.\n\nIf you want to apply multiple tags at once:\n\n```markup\nhttps://buttondown.email/jmduke?tag=python&tag=vue\n```\n\n## Adding metadata to your subscribers\n\nI'm a fan of showing, not telling, so I'll lead with the relevant code sample:\n\n[JSFiddle](https://jsfiddle.net/buttondown/t53cr4gy/21/)\n\nThe trick is to set inputs with the `name` of `metadata__<key>`, as you can see in the code sample above:\n\n```markup\n<input\n  id=\"first-name\"\n  type=\"text\"\n  name=\"metadata__first-name\"\n  required\n  placeholder=\"John\"\n/>\n```\n\nNote that these can be freeform text inputs, like above, or `hidden` inputs if you instead want to invisibly augment your subscription forms with given metadata. (For instance, you can imagine setting metadata for everyone coming through a particular tag or webpage.)\n\n## Automatically sending an email to new subscribers\n\nYou can do this by going to your [Subscribing settings page](https://buttondown.email/settings/subscribing) and checking out the section entitled **I'd like to send my new subscribers...**:\n\n![A screenshot of the Subscribing settings page.](/images/subscribing.png)\n\n## Dealing with spammy subscribers\n\nChances are, this is because you're using an embedded subscription widget and you don't have subscription confirmation turned on. First off — you should turn that on!\n\nI'll be building out captcha support in the future as well but in the meantime, if you still are seeing lots of spammy subscribers [email me](mailto:justin@buttondown.email) and I'll take a look.\n\n## Caveats\n\n### Captcha support\n\nI am piloting a program using [https://www.hcaptcha.com/](https://www.hcaptcha.com/) and will be bringing it (on an opt-in basis) to GA soon!\n\n### Instagram\n\nInstagram's browser is a little, uh, finicky. Take out the `target=\"popupwindow\"` attribute from the form tag and you should be good to go.\n\n### medium\n\nTo embed your subscription widget in Medium, all you need to do is post the link to your newsletter (e.g. https://buttondown.email/jmduke) in Medium — it should automatically embed.\n",
    "title": "Building your subscriber base"
  },
  {
    "path": "/getting-started/hosting-on-a-custom-domain",
    "text": "---\ntitle: Hosting on a custom domain\n---\n\nimport Layout from \"../../components/Layout\";\nimport Warning from \"../../components/Warning\";\nimport { H4, P } from \"../../components/Markdown\";\n\nexport const meta = {\n  title: \"Hosting on a custom domain\",\n};\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Hosting on a custom domain\n\n## Setting up your custom hosting domain\n\n1. If you're not signed up for **Buttondown for Professionals**, go ahead and [upgrade your account](https://buttondown.email/settings/billing)!\n2. Add the custom domain in your [settings page](https://buttondown.email/settings).\n\n![A screenshot of the custom domain modal.](/images/custom-domain.png)\n\n3. Change the `CNAME` record of the domain you'd like to use as your custom domain to `buttondown.email`. The prompt should walk you through the rest of the process?\n\n## Using a subdomain of `buttondown.email`\n\nThis isn't possible to do in the UI, but there are no technical limitations. [Email me](mailto:justin@buttondown.email) and I'll get it wired up for you!\n\n## The difference between hosting domains and sending domains\n\n**Hosting on a custom domain** means using a domain outside of `[buttondown.email](http://buttondown.email)` to host your newsletter and archives — for example, [newsletter.jmduke.com](http://newsletter.jmduke.com).\n\n**Sending from a custom domain** means setting up your DNS records so that Buttondown sends outgoing emails from your domain, improving reputation and delivery metrics.\n\nHosting requires you sign up for [Buttondown for Professionals](http://buttondown.email/pricing); sending does not. This is because, well, sending emails that [actually get delivered](https://blog.buttondown.email/2019/05/16/sending-newsletters-that-get-delivered) is pretty dang important, and it's scummy to hide that behind a paywall.\n\n## Can I use the same domain for hosting and sending?\n\nUnfortunately, some DNS providers will not let you set up the exact same domain or subdomain for both sending emails and as your custom archive.\n\nFor these DNSes, we recommend setting up completely separate subdomains — something along the lines of the following:\n\n- `[newsletter.janedoe.com](http://newsletter.janedoe.com)` for your custom newsletter domain (where folks view archives and subscribe to your newsletter)\n- `[mail.janedoe.com](http://mail.janedoe.com)` for your custom sending domain (where outgoing emails come from)\n\nThis is the best option to preserve the deliverability of your newsletter (and, frankly, most people are not particularly confused by this at all.)\n",
    "title": "Hosting on a custom domain"
  },
  {
    "path": "/getting-started/importing-your-data",
    "text": "---\ntitle: Importing your data\n---\n\nimport Layout from \"../../components/Layout\";\nimport Warning from \"../../components/Warning\";\nimport { H4, P } from \"../../components/Markdown\";\nimport Table from \"../../components/Table\";\n\nexport const meta = {\n  title: \"Importing your data\",\n};\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Importing your data\n\n## Importing subscribers\n\nAssuming that the subscribers have _already consented_ to receiving email (via double-opt-in or some other mechanism provided by your previous subscriber), no! GDPR-wise, their existing consent carries over to Buttondown.\n\nIf you import a large number of subscribers, I'll temporarily disable your account so Buttondown can review the imported emails and make sure they're all up to code. The process shouldn't take more than a few hours!\n\nNavigate to your [settings page](https://buttondown.email/settings) and click _Import subscribers!_ You'll be prompted to upload a CSV:\n\n![A screenshot of the import subscribers modal.](/images/import-subscribers.png)\n\nOnce you do so, you can map each column in your CSV, allowing you to bring in subscribers while keeping their existing tags, join dates, and metadata.\n\n## Importing archives\n\nNavigate to your [settings page](https://buttondown.email/settings) and choose the appropriate service! (If you don't see the service you're looking for, just go ahead and [email me](https://buttondown.email/settings) — I'd be more than happy to migrate them for you!)\n\n![A screenshot of the import archives modal.](/images/import-archives.png)\n\n## Caveats\n\n### Adding a listserv?\n\nBe sure that folks on the listserv are expecting the subscription: if one of them clicks to unsubscribe from the newsletter, it will affect the entire listserv (since from Buttondown's perspective, the listserv is a single subscriber.)\n",
    "title": "Importing your data"
  },
  {
    "path": "/getting-started/registration-and-setup",
    "text": "---\ntitle: Registration & setup\n---\n\nimport Layout from \"../../components/Layout\";\nimport Warning from \"../../components/Warning\";\nimport { H4, P } from \"../../components/Markdown\";\nimport Table from \"../../components/Table\";\n\nexport const meta = {\n  title: \"Registration & setup\",\n};\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Registration & setup\n\n## The 'your address' field\n\nYou may be surprised to learn that CAN-SPAM legislation requires all potentially commercial newsletters to have a physical address in the footer of their emails. This (rightfully!) skeezes some folks out.\n\nIf you're running a business out of your office and you want subscribers to have an accurate location to contact you (perhaps to send physical goods), feel free to use your own address. Otherwise, Buttondown has a virtualized address that you can use for your own needs! We automatically scan and forward along the relevant mail.\n\n<div className=\"bg-gray-300 text-lg px-4 py-4 font-bold rounded-lg\">\n  304 S. Jones Blvd #3567\n  <br />\n  Las Vegas NV 89107\n</div>\n\nBy using this address, you agree to a few things:\n\n1. You are a current user of Buttondown;\n2. You are only using this address for Buttondown purposes;\n3. You cede full right and permission to Buttondown, LLC to open and analyze mail addressed to the address;\n4. You understand that we won't forward any physical mail or packages.\n\n## System / browser requirements\n\nButtondown is entirely based in the browser: you don't need to download anything to use the application.\n\nPersonally, I recommend using Safari or Chrome as your browser (with all due respect to Firefox and the long tail: Safair and Chrome are the two browsers I use so I'm most confident in their usage). You _will_ need to have cookies and JavaScript enabled to get Buttondown working properly, as well as popups (Buttondown uses in-browser popups for certain workflows.)\n",
    "title": "Registration & setup"
  },
  {
    "path": "/getting-started/scheduling-an-email",
    "text": "---\ntitle: Scheduling an email\n---\n\nimport Layout from \"../../components/Layout\";\nimport Warning from \"../../components/Warning\";\nimport { H4, P } from \"../../components/Markdown\";\n\nexport const meta = {\n  title: \"Scheduling an email\",\n};\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Scheduling an email\n\nScheduling an email is easy and — well, not _fun_, but not _not_ fun.\n\n1. Click the \"_Sending immediately_\" button in the Write view to choose a time at which to send your email.\n2. When you're ready to send the email, click the blue \"_Schedule to your subscribers_\" button to set a time to schedule it!\n\n**Note**: Your email will not be scheduled until you confirm your schedule by hitting that big blue button in step two! This trips up a lot of people; for that I apologize.\n\n![A screenshot of the Write page, mid-scheduling.](/images/scheduling.png)\n\n## Caveats\n\n### If I schedule an email for next week, will it go out to subscribers who have joined between now and then?\n\nYes!\n\nThe “send to 1239 subscribers” (or maybe more — or maybe less — who am I to judge?) count appearing in the interface is an estimate, not a sacrosanct guideline. If you schedule an email for two weeks from now, that email will still send to folks who have subscribed between now and then, not just the 1239 who exist right once you hit the button. (Think of it as the computer equivalent of you manually logging in and going and hitting send — nothing gets set in stone!)\n",
    "title": "Scheduling an email"
  },
  {
    "path": "/getting-started/sending-from-a-custom-domain",
    "text": "---\ntitle: Sending from a custom domain\n---\n\nimport Layout from \"../../components/Layout\";\n\nexport const meta = {\n  title: \"Sending from a custom domain\",\n};\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Sending from a custom domain\n\n## Dealing with emails that are ending up in spam\n\nIf you're not using a custom sending domain, then this is likely because you're sending your email from Buttondown's mail servers, but 'signing' it with your own email address. This looks like spam (or at least mistaken identity) to most mailboxes, especially if you're sending from a `@gmail.com` or `@hotmail.com` account.\n\nTo remediate this, you should send your emails directly from Buttondown:\n\n![A screenshot of the setting to allow sending from Buttondown's servers.](/images/sending-from-buttondown.png)\n\nThis will cause emails to come from your-username@mg.buttondown.email, which will have very high deliverability:\n\n![A screenshot of Gmail showing an email sent from Buttondown's servers.](/images/sending-from-buttondown-2.png)\n\n## Dealing with 'softfails' in specific\n\nUnfortunately, SPF only supports a single DNS entry.\n\nIf you're using the same custom email domain for Buttondown and for an inbox provider such as GSuite, this means your two SPF entries may be in conflict!\n\nInstead of appending an extra TXT entry, the proper solution is actually to edit the existing one into something like `v=spf1 include:_spf.google.com include:mailgun.org ~all`, specifying both domains.\n\nOtherwise, some mailboxes may read the GSuite one and ignore the Mailgun one (set by Buttondown), causing a softfail and thus lower deliverability.\n\n## The difference between hosting domains and sending domains\n\n**Hosting on a custom domain** means using a domain outside of `[buttondown.email](http://buttondown.email)` to host your newsletter and archives — for example, [newsletter.jmduke.com](http://newsletter.jmduke.com).\n\n**Sending from a custom domain** means setting up your DNS records so that Buttondown sends outgoing emails from your domain, improving reputation and delivery metrics.\n\nHosting requires you sign up for [Buttondown for Professionals](http://buttondown.email/pricing); sending does not. This is because, well, sending emails that [actually get delivered](https://blog.buttondown.email/2019/05/16/sending-newsletters-that-get-delivered) is pretty dang important, and it's scummy to hide that behind a paywall.\n\n## Can I use the same domain for hosting and sending?\n\nUnfortunately, some DNS providers will not let you set up the exact same domain or subdomain for both sending emails and as your custom archive.\n\nFor these DNSes, we recommend setting up completely separate subdomains — something along the lines of the following:\n\n- `[newsletter.janedoe.com](http://newsletter.janedoe.com)` for your custom newsletter domain (where folks view archives and subscribe to your newsletter)\n- `[mail.janedoe.com](http://mail.janedoe.com)` for your custom sending domain (where outgoing emails come from)\n\nThis is the best option to preserve the deliverability of your newsletter (and, frankly, most people are not particularly confused by this at all.)\n",
    "title": "Sending from a custom domain"
  },
  {
    "path": "/getting-started/sending-your-first-email",
    "text": "---\ntitle: Sending your first email\n---\n\nimport Layout from \"../../components/Layout\";\nimport Warning from \"../../components/Warning\";\nimport { H4, P, Code, Pre } from \"../../components/Markdown\";\nimport Table from \"../../components/Table\";\n\nexport const meta = {\n  title: \"Sending your first email\",\n};\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Sending your first email\n\n## Uploading images\n\nUploading images is easy! You can just drag and drop them into the main text area of your email; it'll be automatically uploaded to S3 and inserted into the text.\n\nButtondown uses Amazon S3 (a fairly common file hosting platform) to safely and securely store your images. They last indefinitely by default; there's no interface to delete images that you've uploaded to Buttondown, but you can do so via the API (or email me and I can manually delete them on your behalf.) This means that even if you were to delete the email in which images are referenced, the images themselves still exist on Buttondown's servers.\n\n## Custom unsubscribe links\n\nThis answer assumes a baseline familiarity with Markdown.\n\nButtondown automatically appends an unsubscribe link to the footer of all emails you send, but you may want to manually place one in your email as well (for instance, at the top of the email, if it's an infrequent newsletter). To generate the unsubscription URL, use the `{{ unsubscribe_url }}` shortcode.\n\nCombining this with Markdown, a link would look something like:\n\n```markdown\n[Click here to unsubscribe!]({{ unsubscribe_url }}).\n```\n\n(This link will render on draft emails, but the resultant URL won't do anything of importance. I'm working on a better solution so you can 'click through' and verify that the URL is well-formed.)\n\n## Tags and segmentation\n\nButtondown offers _tags_ to do this; subscribers can have one or more tags.\n\nYou can send emails including (or excluding!) certain tags, making it easy to\ntailor your newsletters' content to who's going to enjoy it the most or find it the most relevant\n\nThere are many ways to apply a tag to a subscriber, once you've created them:\n\n- Customizing your [subscription form](https://blog.buttondown.email/2019/07/17/customizing-your-subscription-form-to-tag-new-subscribers)\n- Manually tagging them\n- Setting them via the [API](https://api.buttondown.email/v1/schema)\n\n## Mail merges\n\nA mail merge is a catch-call term for sending out emails with specific fields changed. For example, being able to send out an email that says something like:\n\n> Hello, {first_name}!\n\nWith \"{first_name}\" being replaced by the first name of the recipient of that email.\n\nButtondown supports mail merges through subscriber metadata. You can set metadata for a given subscriber either via the API or manually, by going to the \"Notes\" section for a given subscriber:\n\n![A screenshot of the subscriber details modal, where metadata can be set.](/images/metadata.png)\n\nYou can then refer to metadata (such as the metadata above) in your email by using the following variable: `{{ subscriber.metadata.first_name }}`.\n\nYou can also conditionally show a paragraph if metadata is set using a snippet like the following:\n\n<!-- prettier-ignore -->\n```html\n{% if subscriber.metadata.first_name %} \nHello {{ subscriber.metadata.first_name}}! \n{% else %} \nHello friend!\n{% endif %}\n```\n\n## Sending emails based on an RSS feed\n\nYou'll want to get set up with our [Zapier integration](/integrations/zapier).\n\n## After sending\n\n### Updating your email's slug\n\nIf you update the slug of an email that's already been sent out, worry not! The old link that references an old slug will still work; Buttondown keeps track of historical slugs for each email and redirects readers who go to the old link accordingly.\n\n### Updating your email's issue number\n\nButtondown tries to be clever with determining what issue number your newsletter is on. Sometimes it is either _too_ clever or not nearly clever enough, though, and you end up in a situation where your seventh issue is showing up as your eighth or vice-versa. This is particularly pernicious as a problem if you're bringing in archives from another system.\n\nYou can manually edit your issue numbers by going to the **Edit Email** screen in your Archive page. The **ID** field corresponds with the issue number:\n\n![A screenshot of the 'edit email' modal, available after sending the email.](/images/edit-email-modal.png)\n\nIn particular, Buttondown will respect your existing issue numbers and always go one greater than the largest issue number, so if you change your most recent email to be the \"right\" number everything subsequent from that should be in order.\n\n(And, of course, you can disable issue numbers altogether by signing up for Buttondown for Professionals.)\n\n### Adding share links to your email\n\nYou can add share links to your email by customizing your newsletter's footer in your [Design settings](https://buttondown.email/settings/design) page.\n\nThen, you can add custom Markdown links using some template variables that Buttondown assigns you:\n\n```markup\nIf you liked this email, please share it:\n\n- on [Twitter](https://twitter.com/intent/tweet?url={{email_link}}&text={{email.subject}})\n- on [Facebook](https://www.facebook.com/sharer/sharer.php?u={{email_link}})\n- on [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url={{email_link}})\n```\n\nInterested in other social networks besides Twitter and Facebook? [Email me](mailto:justin@buttondown.email) and I'll add them!\n\n## Caveats\n\n### A warning about the in-browser preview\n\nThis is a common and unfortunate question. The short answer is: **email is weird, email inboxes are weird, and there's nothing you or I or anyone can do about it.** Buttondown's markdown previewing is meant to closely resemble the inbox from a content perspective (links and HTML tags and all of those things appear as they should), but will never be able to accurate resemble the inbox from a _stylistic_ perspective (things being arranged and formatted as you'd expect.)\n\nOur friends over at Litmus have a [really useful, detailed answer](https://help.litmus.com/article/158-why-do-some-email-clients-show-my-email-differently-than-others):\n\n> Web-based email clients (such as [Outlook.com](http://outlook.com/) or Gmail) will certainly perform most the tasks listed above, but they also have a larger, more difficult job. They have to prepare the HTML to be converted into HTML that's safe to show within their own email client's HTML. This is a surprisingly difficult thing to do and most web-based email clients' preprocessors will err on the side of being overly restrictive and removing anything with even the slightest potential to affect the layout of their email client. We'll cover the various mistakes made by these preprocessors a little later, but you should expect this to be the second biggest cause of headaches when designing HTML emails - the first biggest cause is still to be discussed.\n\n### Why is my email all ...purple?\n\nIf you're previewing multiple drafts of an email in Gmail, you might notice that the text is all purple! This isn't a Buttondown thing — this is Gmail thinking that multiple emails sent in the same day with the same subject are responses to one another, and it displays the thread of emails in a \"conversation view\". You can read about Gmail's conversation view [here](https://support.google.com/mail/thread/5162234?hl=en):\n\n> The purple colouration is a display only feature that only exists in the display where it is being seen. It is not sent in any messages and you can use Gmail's show original feature to verify that - you will need to know a little about HTML coding.\n\n> The colour is applied to text that is repeated from a previous message in the current conversation and the reason it is visible to recipients is because they also are using Gmail and they also have copies of previous messages in the current conversation. What gets coloured in their conversation might be quite different from what gets coloured in yours.\n",
    "title": "Sending your first email"
  },
  {
    "path": "/migration-guides/substack",
    "text": "---\ntitle: Substack\n---\n\nimport Layout from \"../../components/Layout\";\nimport Warning from \"../../components/Warning\";\nimport { H4, P, Code, Pre } from \"../../components/Markdown\";\nimport Table from \"../../components/Table\";\n\nexport const meta = {\n  title: \"Substack\",\n};\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Substack\n\nBoth Substack and Buttondown use the same payments processor — [Stripe](https://stripe.com/). Stripe is actually the source of truth when it comes to things like your subscribers' registered payment methods (ie credit cards) and what they've purchased / subscribed to.\n\nWhen you connect your Stripe account to Buttondown, you're also bringing over the history of what customers and subscribers you have and what they've paid. Over time, I'd like to make this process a little more automatic but at the moment it requires a bit of manual labor on my part to make sure everything is wired up correctly (free of charge, of course.)\n\nWhat this means for you is **your paying subscribers don't need to do anything extra on their end just because you're switching providers**. Just email me when you've connected your Stripe account and I'll take of the rest!\n\n### Importing 'founding members'\n\nButtondown can handle the _existing_ \"pay what you want\" prices for subscribers but not allow them to change the amount they're paying (beyond unsubscribing and resubscribing).\n\nAdditionally, Buttondown supports a **Pay What You Want** model if you want to allow your subscribers to be patrons and support your writing without gating any specific content. You can head over to the [Paid Subscriptions](http://buttondown.email/settings/paid-subscriptions) page to get started.\n",
    "title": "Substack"
  },
  {
    "path": "/need-more-help/",
    "text": "---\ntitle: Need more help?\n---\n\nimport Layout from \"../../components/Layout\";\n\nexport const meta = {\n  title: \"Need more help?\",\n};\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Need more help?\n\nI tried to put as much information as I could about how to use Buttondown\nin this guide, but I'm sure I'm missing a lot of things.\n\nEmail me at [justin@buttondown.email](mailto:justin@buttondown.email)\nand I'll answer your question as quickly as possible to the best of my ability!\n",
    "title": "Need more help?"
  },
  {
    "path": "/odds-and-ends/exporting-your-data",
    "text": "---\ntitle: Exporting your data\n---\n\nimport Layout from \"../../components/Layout\";\n\nexport const meta = {\n  title: \"Exporting your data\",\n};\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Exporting your data\n\nTo export your data, hit the ol' Export Data button at the bottom of your settings page:\n\n![A screenshot of the \"export data\" button.](/images/exporting.png)\n",
    "title": "Exporting your data"
  },
  {
    "path": "/odds-and-ends/offboarding",
    "text": "---\ntitle: Offboarding\n---\n\nimport Layout from \"../../components/Layout\";\n\nexport const meta = {\n  title: \"Offboarding\",\n};\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n# Offboarding\n\nIf you want to delete your Buttondown account, no hard feelings! Hit the \"delete your account\" button\nat the bottom of your [Account page](https://buttondown.email/account) and our data will be _instantly_\nremoved from our servers. (There's no recovering this, so be sure to [export your data](/odds-and-ends/exporting-your-data) beforehand if you need your data!)\n\n![A screenshot of the \"delete your account\" button.](/images/deleting-your-account.png)\n",
    "title": "Offboarding"
  },
  {
    "path": "/odds-and-ends/privacy-and-security",
    "text": "---\ntitle: Privacy & security\n---\n\nimport Layout from \"../../components/Layout\";\n\nexport const meta = {\n  title: \"Privacy & Security\",\n};\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n\n### Why Buttondown requires Javascript on archive pages\n\nNo interesting reason, just technical debt! This is something I hope to improve\nin the future.\n\n### GDPR compliance\n\nButtondown is of course fully GDPR compliant. You can read Buttondown's privacy policy [here](https://buttondown.email/privacy) and its cookie policy [here](https://buttondown.email/cookies).\n\nIf you're interested in a full data request, please [email me](mailto:justin@buttondown.email).\n\n### Bug bounty\n\nSadly, Buttondown doesn't have the security budget to offer a bug bounty, _but_ I would be deeply indebted to you for doing so! Please report any vulnerabilities to [justin@buttondown.email](mailto:justin@buttondown.email) — I promise to respond promptly and provide a fix as soon as humanly possible.\n\nSincere kudos to the following individuals for reporting vulnerabilities:\n\n1. John Bullecer\n2. Vivek Modi\n3. Filippo Valsorda\n4. Iheanyi Ekechukwu\n\n### Turning off link or click tracking\n\nGo to your [account settings page](https://buttondown.email/account) and check the \"opt out of analytics\" checkbox!:\n\n![A screenshot showing where on the settings page one can opt out.](/images/opt-out.png)\n\n### Adult content policy\n\nMy default stance is to support all content so long as it is not harassing, damaging, or otherwise illegal.\n\nHowever, _paid newsletters_ are a bit of a different story. Buttondown uses [Stripe](https://stripe.com/restricted-businesses) to process payments; Stripe has some restrictions on adult content. Specifically, it prohibits:\n\n> Pornography and other obscene materials (including literature, imagery and other media) depicting nudity or explicitly sexual acts; sites offering any sexually-related services such as prostitution, escorts, pay-per view, adult live chat features; sexually oriented items (e.g., adult toys); adult video stores and sexually oriented massage parlors; gentleman's clubs, topless bars, and strip clubs; sexually oriented dating services\n\nUnfortunately, that means things are out of my hands: if you want to send adult content over Buttondown you cannot use its paid subscriptions functionality.\n\n### Financial assistance to writers\n\nNo. In the event that I _started_ such a practice, I would publish information about what heuristic I used as well as a full list of writers receiving such assistance.\n\nBut I will almost certainly never do this. It is a violation of Buttondown's core ethos, which is that Buttondown is a tool rather than an ecosystem — a piece of software, rather than a platform. It's important to me that people using Buttondown are, at the end of the day, writing _newsletters_, not _Buttondowns_.\n\n## WCAG compliance\n\nButtondown follows the [compliance checklist as outlined by HHS](https://www.hhs.gov/web/section-508/making-files-accessible/checklist/email-508-checklist/index.html).\n\nIf you have any other specific questions regarding Buttondown's accessibility, I'd be happy to answer.\n",
    "title": "Privacy & security"
  },
  {
    "path": "/welcome/",
    "text": "---\ntitle: Welcome\n---\n\nimport Layout from \"../../components/Layout\";\n\nexport const meta = {\n  title: \"Welcome!\",\n};\nexport default ({ children }) => <Layout meta={meta}>{children}</Layout>;\n",
    "title": "Welcome"
  }
]
